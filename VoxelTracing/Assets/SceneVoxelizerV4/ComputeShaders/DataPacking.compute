#define THREAD_GROUP_SIZE_X 8
#define THREAD_GROUP_SIZE_Y 8
#define THREAD_GROUP_SIZE_Z 8

#include "BitPacking.cginc"

//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||

RWTexture2D<float4> AlbedoBuffer;
RWTexture2D<float4> EmissiveBuffer;
RWTexture2D<float4> NormalBuffer;
RWTexture2D<float4> Write;

RWTexture3D<float4> AlbedoVoxelBuffer;
RWTexture3D<float4> EmissiveVoxelBuffer;
RWTexture3D<float4> NormalVoxelBuffer;
RWTexture3D<float4> PackedVoxelBuffer;

//||||||||||||||||||||||||||||| ComputeShader_DataPacking64 |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_DataPacking64 |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_DataPacking64 |||||||||||||||||||||||||||||

#pragma kernel ComputeShader_DataPacking64
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void ComputeShader_DataPacking64(uint3 id : SV_DispatchThreadID)
{
    float4 albedoColor = AlbedoBuffer[id.xy];
    float4 emissiveColor = EmissiveBuffer[id.xy];
    float4 normalColor = NormalBuffer[id.xy];
    
    albedoColor = saturate(albedoColor);
    normalColor = saturate(normalColor);

    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    uint ALBEDO_R5 = albedoColor.r * BITS_5_MAX_VALUE;
    uint ALBEDO_G5 = albedoColor.g * BITS_5_MAX_VALUE;
    uint ALBEDO_B5 = albedoColor.b * BITS_5_MAX_VALUE;
    uint ALBEDO_A1 = any(albedoColor.a) ? 1 : 0;

    ALBEDO_R5 = KeepBitsOfValue(ALBEDO_R5, 0, 5);
    ALBEDO_G5 = KeepBitsOfValue(ALBEDO_G5, 0, 5);
    ALBEDO_B5 = KeepBitsOfValue(ALBEDO_B5, 0, 5);
    ALBEDO_A1 = KeepBitsOfValue(ALBEDO_A1, 0, 1);

    uint combinedAlbedo_16bit_R5G5B5A1 = ALBEDO_R5 | ALBEDO_G5 << BITS_5 | ALBEDO_B5 << BITS_10 | ALBEDO_A1 << BITS_15;
    float packedAlbedo_16bit_R5G5B5A1 = combinedAlbedo_16bit_R5G5B5A1 / float(BITS_16_MAX_VALUE);

    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||
    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||
    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||

    uint NORMAL_R5 = normalColor.r * BITS_5_MAX_VALUE;
    uint NORMAL_G6 = normalColor.g * BITS_6_MAX_VALUE;
    uint NORMAL_B5 = normalColor.b * BITS_5_MAX_VALUE;

    NORMAL_R5 = KeepBitsOfValue(NORMAL_R5, 0, 5);
    NORMAL_G6 = KeepBitsOfValue(NORMAL_G6, 0, 6);
    NORMAL_B5 = KeepBitsOfValue(NORMAL_B5, 0, 5);

    uint combinedNormal_16bit_R5G6B5 = NORMAL_R5 | NORMAL_G6 << BITS_5 | NORMAL_B5 << BITS_11;
    float packedNormal_16bit_R5G5B5 = combinedNormal_16bit_R5G6B5 / float(BITS_16_MAX_VALUE);

    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||
    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||
    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||

    float4 encodedEmissionColor = EncodeRGBM(emissiveColor.rgb);

    float colorMultiplier = encodedEmissionColor.a;
    float packed_16bit_colorMultiplier = f32tof16(colorMultiplier) / float(BITS_16_MAX_VALUE);

    uint EMISSION_R5 = encodedEmissionColor.r * BITS_5_MAX_VALUE;
    uint EMISSION_G6 = encodedEmissionColor.g * BITS_6_MAX_VALUE;
    uint EMISSION_B5 = encodedEmissionColor.b * BITS_5_MAX_VALUE;

    EMISSION_R5 = KeepBitsOfValue(EMISSION_R5, 0, 5);
    EMISSION_G6 = KeepBitsOfValue(EMISSION_G6, 0, 6);
    EMISSION_B5 = KeepBitsOfValue(EMISSION_B5, 0, 5);

    uint combinedEmission_16bit_R5G6B5 = EMISSION_R5 | EMISSION_G6 << BITS_5 | EMISSION_B5 << BITS_11;
    float packedEmission_16bit_R5G6B5 = combinedEmission_16bit_R5G6B5 / float(BITS_16_MAX_VALUE);

    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS |||||||||||||||||
    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS |||||||||||||||||
    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS |||||||||||||||||

    //Write[id.xy] = float4(packed_16bit_colorMultiplier, packedNormal_16bit_R5G5B5, packedEmission_16bit_R5G6B5, packedAlbedo_16bit_R5G5B5A1);
    Write[id.xy] = float4(packed_16bit_colorMultiplier, packedAlbedo_16bit_R5G5B5A1, packedEmission_16bit_R5G6B5, packedNormal_16bit_R5G5B5);
}

//||||||||||||||||||||||||||||| ComputeShader_DataUnpacking64 |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_DataUnpacking64 |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_DataUnpacking64 |||||||||||||||||||||||||||||

#pragma kernel ComputeShader_DataUnpacking64
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void ComputeShader_DataUnpacking64(uint3 id : SV_DispatchThreadID)
{
    float4 packedBuffer64 = PackedVoxelBuffer[id.xyz];

    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    //||||||||||||||||| ALBEDO BUFFER 16 BITS (RGBA5551) |||||||||||||||||
    uint ALBEDO_R5G5B5A1 = packedBuffer64.g * BITS_16_MAX_VALUE;

    uint ALBEDO_R5 = ExtractBits(ALBEDO_R5G5B5A1, 0u, 5u);
    uint ALBEDO_G5 = ExtractBits(ALBEDO_R5G5B5A1, 5u, 5u);
    uint ALBEDO_B5 = ExtractBits(ALBEDO_R5G5B5A1, 10u, 5u);
    uint ALBEDO_A1 = ExtractBits(ALBEDO_R5G5B5A1, 15u, 1u);

    float4 unpackedAlbedo = float4(0, 0, 0, 0);
    unpackedAlbedo.r = (float) ALBEDO_R5 / (float) BITS_5_MAX;
    unpackedAlbedo.g = (float) ALBEDO_G5 / (float) BITS_5_MAX;
    unpackedAlbedo.b = (float) ALBEDO_B5 / (float) BITS_5_MAX;
    unpackedAlbedo.a = any(ALBEDO_A1) ? 1 : 0;

    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||
    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||
    //||||||||||||||||| NORMAL BUFFER 16 BITS (RGB565) |||||||||||||||||
    uint NORMAL_R5G6B5 = packedBuffer64.a * BITS_16_MAX_VALUE;

    uint NORMAL_R5 = ExtractBits(NORMAL_R5G6B5, 0u, 5u);
    uint NORMAL_G6 = ExtractBits(NORMAL_R5G6B5, 5u, 6u);
    uint NORMAL_B5 = ExtractBits(NORMAL_R5G6B5, 11u, 5u);

    float3 unpackedNormal = float3(0, 0, 0);
    unpackedNormal.r = (float) NORMAL_R5 / (float) BITS_5_MAX;
    unpackedNormal.g = (float) NORMAL_G6 / (float) BITS_6_MAX;
    unpackedNormal.b = (float) NORMAL_B5 / (float) BITS_5_MAX;
    
    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||
    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||
    //||||||||||||||||| EMISSIVE BUFFER 32 BITS (RGB565 + Half16) |||||||||||||||||

    uint EMISSIVE_R5G6B5 = packedBuffer64.b * BITS_16_MAX_VALUE;
    uint EMISSIVE_Multiplier = packedBuffer64.r * BITS_16_MAX_VALUE;

    uint EMISSIVE_R5 = ExtractBits(EMISSIVE_R5G6B5, 0u, 5u);
    uint EMISSIVE_G6 = ExtractBits(EMISSIVE_R5G6B5, 5u, 6u);
    uint EMISSIVE_B5 = ExtractBits(EMISSIVE_R5G6B5, 11u, 5u);

    float3 unpackedEncodedEmissiveColor = float3(0, 0, 0);
    unpackedEncodedEmissiveColor.r = (float) EMISSIVE_R5 / (float) BITS_5_MAX;
    unpackedEncodedEmissiveColor.g = (float) EMISSIVE_G6 / (float) BITS_6_MAX;
    unpackedEncodedEmissiveColor.b = (float) EMISSIVE_B5 / (float) BITS_5_MAX;
    
    float unpackedEncodedEmissiveMultiplier = f16tof32(EMISSIVE_Multiplier);

    float3 unpackedEmissive = DecodeRGBM(float4(unpackedEncodedEmissiveColor, unpackedEncodedEmissiveMultiplier));

    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS (62 BITS USED) (ARGB64) |||||||||||||||||
    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS (62 BITS USED) (ARGB64) |||||||||||||||||
    //||||||||||||||||| FINAL PACKED BUFFER 64 BITS (62 BITS USED) (ARGB64) |||||||||||||||||

    AlbedoVoxelBuffer[id.xyz] = unpackedAlbedo;
    NormalVoxelBuffer[id.xyz] = float4(unpackedNormal, unpackedAlbedo.a);
    EmissiveVoxelBuffer[id.xyz] = float4(unpackedEmissive, unpackedAlbedo.a);
}