#define THREAD_GROUP_SIZE_X 8
#define THREAD_GROUP_SIZE_Y 8
#define THREAD_GROUP_SIZE_Z 8

//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| VARIABLES ||||||||||||||||||||||||||||||||||||||

RWTexture2D<float4> Write2D;
RWTexture3D<float4> Write3D;

int KernelSize;

//|||||||||||||||||||||||||||||||||||||| FUNCTION ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| FUNCTION ||||||||||||||||||||||||||||||||||||||
//|||||||||||||||||||||||||||||||||||||| FUNCTION ||||||||||||||||||||||||||||||||||||||

float4 Dilate2D(uint2 uv)
{
    uint offset = 1;
    int index = 0;

    while (!(Write2D[uv].a > 0.0) && index < KernelSize)
    {
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(0, offset)]; //up
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(0, -offset)]; //down
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(offset, 0)]; //right
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(-offset, 0)]; //left
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(-offset, -offset)]; //diagonal left down
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(-offset, offset)]; //diagonal left up
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(offset, offset)]; //diagonal right up
        Write2D[uv] = Write2D[uv].a > 0.0 ? Write2D[uv] : Write2D[uv + uint2(offset, -offset)]; //diagonal right down

        index++;
    }

    return Write2D[uv];
}

float4 Dilate3D(uint3 uvw)
{
    uint offset = 1;
    int index = 0;
    
    while (!(Write3D[uvw].a > 0.0) && index < KernelSize)
    {
        // 6 face directions
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, 0, offset)]; // up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, 0, -offset)]; // down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, offset, 0)]; // front
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, -offset, 0)]; // back
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, 0, 0)]; // right
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, 0, 0)]; // left

        // 12 edge directions
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, offset, 0)]; // front-right
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, -offset, 0)]; // back-right
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, offset, 0)]; // front-left
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, -offset, 0)]; // back-left
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, 0, offset)]; // right-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, 0, -offset)]; // right-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, 0, offset)]; // left-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, 0, -offset)]; // left-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, offset, offset)]; // front-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, offset, -offset)]; // front-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, -offset, offset)]; // back-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(0, -offset, -offset)]; // back-down

        // 8 corner directions
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, offset, offset)]; // front-right-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, offset, -offset)]; // front-right-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, -offset, offset)]; // back-right-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(offset, -offset, -offset)]; // back-right-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, offset, offset)]; // front-left-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, offset, -offset)]; // front-left-down
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, -offset, offset)]; // back-left-up
        Write3D[uvw] = Write3D[uvw].a > 0.0 ? Write3D[uvw] : Write3D[uvw + uint3(-offset, -offset, -offset)]; // back-left-down

        index++;
    }
    
    return Write3D[uvw];
}

//||||||||||||||||||||||||||||| ComputeShader_Dilation2D |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_Dilation2D |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_Dilation2D |||||||||||||||||||||||||||||

#pragma kernel ComputeShader_Dilation2D
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void ComputeShader_Dilation2D(uint3 id : SV_DispatchThreadID)
{
    float4 originalColor = Write2D[id.xy];
    Write2D[id.xy] = float4(Dilate2D(id.xy).rgb, originalColor.a);
}

//||||||||||||||||||||||||||||| ComputeShader_Dilation3D |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_Dilation3D |||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||| ComputeShader_Dilation3D |||||||||||||||||||||||||||||

#pragma kernel ComputeShader_Dilation3D
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void ComputeShader_Dilation3D(uint3 id : SV_DispatchThreadID)
{
    float4 originalColor = Write3D[id.xyz];
    Write3D[id.xyz] = float4(Dilate3D(id.xyz).rgb, originalColor.a);
}